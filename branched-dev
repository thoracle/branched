#!/bin/bash

# BranchEd Development Server Script
# Advanced version with more options and features

# Configuration
DEFAULT_PORT=8000
VENV_DIR="venv"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STATIC_DIR="$SCRIPT_DIR/static"
LOG_FILE="$SCRIPT_DIR/branched.log"

# Parse command line arguments
PORT=${1:-$DEFAULT_PORT}
MODE=${2:-"normal"} # normal, debug, or background

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Functions
print_header() {
    echo -e "${GREEN}╔══════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║        BranchEd Story Editor         ║${NC}"
    echo -e "${GREEN}║           Development Mode           ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════╝${NC}"
    echo ""
}

print_usage() {
    echo "Usage: ./branched-dev [port] [mode]"
    echo ""
    echo "Arguments:"
    echo "  port    Port number (default: 8000)"
    echo "  mode    Server mode: normal, debug, or background (default: normal)"
    echo ""
    echo "Examples:"
    echo "  ./branched-dev          # Start on port 8000 in normal mode"
    echo "  ./branched-dev 3000     # Start on port 3000"
    echo "  ./branched-dev 8000 debug      # Start with debug output"
    echo "  ./branched-dev 8000 background # Start in background"
}

check_dependencies() {
    echo -e "${YELLOW}→ Checking dependencies...${NC}"

    # Check for Python 3
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}✗ Python 3 is not installed${NC}"
        exit 1
    fi

    # Check for lsof
    if ! command -v lsof &> /dev/null; then
        echo -e "${RED}✗ lsof is not installed${NC}"
        echo "  Install with: brew install lsof (macOS) or apt-get install lsof (Linux)"
        exit 1
    fi

    echo -e "${GREEN}✓ All dependencies found${NC}"
}

setup_venv() {
    if [ ! -d "$VENV_DIR" ]; then
        echo -e "${YELLOW}→ Creating virtual environment...${NC}"
        python3 -m venv "$VENV_DIR"
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✓ Virtual environment created${NC}"

            # Activate and install any required packages
            source "$VENV_DIR/bin/activate"
            pip install --quiet --upgrade pip 2>/dev/null

            # Add any required packages here
            # pip install --quiet package_name 2>/dev/null
        else
            echo -e "${RED}✗ Failed to create virtual environment${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}✓ Virtual environment found${NC}"
        source "$VENV_DIR/bin/activate"
    fi
}

kill_existing_processes() {
    echo -e "${YELLOW}→ Checking for processes on port $PORT...${NC}"

    # Find PIDs using the port
    PIDS=$(lsof -ti:$PORT 2>/dev/null)

    if [ ! -z "$PIDS" ]; then
        echo -e "${YELLOW}  Found process(es) on port $PORT: $PIDS${NC}"

        for PID in $PIDS; do
            # Try graceful shutdown first
            kill $PID 2>/dev/null
            sleep 0.5

            # Check if still running
            if kill -0 $PID 2>/dev/null; then
                # Force kill if still running
                kill -9 $PID 2>/dev/null
                echo -e "${GREEN}✓ Force killed process $PID${NC}"
            else
                echo -e "${GREEN}✓ Gracefully stopped process $PID${NC}"
            fi
        done

        sleep 1
    else
        echo -e "${GREEN}✓ Port $PORT is available${NC}"
    fi
}

start_server() {
    cd "$SCRIPT_DIR"

    # Check if custom server exists
    if [ ! -f "server.py" ]; then
        echo -e "${YELLOW}Custom server not found, using simple HTTP server${NC}"
        cd "$STATIC_DIR"
    fi

    case "$MODE" in
        debug)
            echo -e "${PURPLE}Starting in DEBUG mode${NC}"
            echo -e "${GREEN}════════════════════════════════════════${NC}"
            echo -e "${GREEN}Server: http://localhost:$PORT/${NC}"
            echo -e "${GREEN}Logs: Verbose output enabled${NC}"
            echo -e "${GREEN}════════════════════════════════════════${NC}"
            if [ -f "server.py" ]; then
                python3 -u server.py $PORT 2>&1 | tee "$LOG_FILE"
            else
                python3 -u -m http.server $PORT --bind 0.0.0.0 2>&1 | tee "$LOG_FILE"
            fi
            ;;

        background)
            echo -e "${BLUE}Starting in BACKGROUND mode${NC}"
            echo -e "${GREEN}════════════════════════════════════════${NC}"
            echo -e "${GREEN}Server: http://localhost:$PORT/${NC}"
            echo -e "${GREEN}Logs: $LOG_FILE${NC}"
            echo -e "${GREEN}Stop: ./branched-dev stop${NC}"
            echo -e "${GREEN}════════════════════════════════════════${NC}"

            if [ -f "server.py" ]; then
                nohup python3 server.py $PORT > "$LOG_FILE" 2>&1 &
            else
                nohup python3 -m http.server $PORT > "$LOG_FILE" 2>&1 &
            fi
            SERVER_PID=$!
            echo $SERVER_PID > "$SCRIPT_DIR/.branched.pid"
            echo -e "${GREEN}✓ Server started with PID: $SERVER_PID${NC}"
            ;;

        normal|*)
            echo -e "${GREEN}════════════════════════════════════════${NC}"
            echo -e "${GREEN}Server: http://localhost:$PORT/${NC}"
            echo -e "${GREEN}Stop: Press Ctrl+C${NC}"
            echo -e "${GREEN}════════════════════════════════════════${NC}"
            echo ""
            if [ -f "server.py" ]; then
                python3 server.py $PORT
            else
                python3 -m http.server $PORT
            fi
            ;;
    esac
}

stop_server() {
    if [ -f "$SCRIPT_DIR/.branched.pid" ]; then
        PID=$(cat "$SCRIPT_DIR/.branched.pid")
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            echo -e "${GREEN}✓ Stopped server (PID: $PID)${NC}"
        else
            echo -e "${YELLOW}Server not running (stale PID file)${NC}"
        fi
        rm "$SCRIPT_DIR/.branched.pid"
    else
        echo -e "${YELLOW}No background server found${NC}"
    fi

    # Also check for any processes on the default port
    kill_existing_processes
}

# Main script logic
cd "$SCRIPT_DIR"

# Handle special commands
if [ "$1" == "stop" ]; then
    print_header
    stop_server
    exit 0
elif [ "$1" == "help" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_header
    print_usage
    exit 0
fi

# Normal startup
print_header
check_dependencies
setup_venv
kill_existing_processes

echo -e "${YELLOW}→ Starting BranchEd server...${NC}"
echo ""

start_server

# Cleanup on exit
deactivate 2>/dev/null