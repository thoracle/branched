#!/bin/bash

# BranchEd Server Management Script
# Handles virtual environment setup, port cleanup, and server startup

# Configuration
PORT=8000
VENV_DIR="venv"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STATIC_DIR="$SCRIPT_DIR/static"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}╔══════════════════════════════════════╗${NC}"
echo -e "${GREEN}║        BranchEd Story Editor         ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════╝${NC}"
echo ""

# Change to script directory
cd "$SCRIPT_DIR"

# Step 1: Setup virtual environment if it doesn't exist
if [ ! -d "$VENV_DIR" ]; then
    echo -e "${YELLOW}→ Creating virtual environment...${NC}"
    python3 -m venv "$VENV_DIR"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Virtual environment created${NC}"
    else
        echo -e "${RED}✗ Failed to create virtual environment${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✓ Virtual environment found${NC}"
fi

# Activate virtual environment
echo -e "${YELLOW}→ Activating virtual environment...${NC}"
source "$VENV_DIR/bin/activate"
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓ Virtual environment activated${NC}"
else
    echo -e "${RED}✗ Failed to activate virtual environment${NC}"
    exit 1
fi

# Install/upgrade required packages
echo -e "${YELLOW}→ Checking Python packages...${NC}"
pip install --quiet --upgrade pip 2>/dev/null

# Check if we need any specific packages (add here if needed)
# For now, we're using Python's built-in http.server, so no extra packages needed

# Step 2: Kill any processes running on our port
echo -e "${YELLOW}→ Checking for processes on port $PORT...${NC}"

# Find PIDs using the port
PIDS=$(lsof -ti:$PORT)

if [ ! -z "$PIDS" ]; then
    echo -e "${YELLOW}  Found process(es) on port $PORT: $PIDS${NC}"
    echo -e "${YELLOW}→ Killing existing processes...${NC}"

    for PID in $PIDS; do
        kill -9 $PID 2>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✓ Killed process $PID${NC}"
        else
            echo -e "${RED}✗ Failed to kill process $PID (may require sudo)${NC}"
        fi
    done

    # Wait a moment for ports to be released
    sleep 1
else
    echo -e "${GREEN}✓ Port $PORT is available${NC}"
fi

# Step 3: Start the server
echo -e "${YELLOW}→ Starting BranchEd server...${NC}"
echo ""
echo -e "${GREEN}════════════════════════════════════════${NC}"
echo -e "${GREEN}Server starting at: http://localhost:$PORT/${NC}"
echo -e "${GREEN}════════════════════════════════════════${NC}"
echo ""
echo "Press Ctrl+C to stop the server"
echo ""

# Start the custom Python server
cd "$SCRIPT_DIR"

# Check if server.py exists
if [ -f "server.py" ]; then
    python3 server.py $PORT
else
    # Fallback to simple HTTP server
    echo -e "${YELLOW}Custom server not found, using simple HTTP server${NC}"
    cd "$STATIC_DIR"
    python3 -m http.server $PORT
fi

# Deactivate virtual environment when server stops
deactivate